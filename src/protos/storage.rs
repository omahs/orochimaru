// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `storage.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:StorageRandomness)
pub struct StorageRandomness {
    // message fields
    // @@protoc_insertion_point(field:StorageRandomness.uuid)
    pub uuid: ::std::string::String,
    // @@protoc_insertion_point(field:StorageRandomness.previous_uuid)
    pub previous_uuid: ::std::string::String,
    // @@protoc_insertion_point(field:StorageRandomness.keyring_uuid)
    pub keyring_uuid: ::std::string::String,
    // @@protoc_insertion_point(field:StorageRandomness.receiver_uuid)
    pub receiver_uuid: ::std::string::String,
    // @@protoc_insertion_point(field:StorageRandomness.epoch)
    pub epoch: u64,
    // @@protoc_insertion_point(field:StorageRandomness.alpha)
    pub alpha: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:StorageRandomness.gamma)
    pub gamma: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:StorageRandomness.c)
    pub c: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:StorageRandomness.s)
    pub s: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:StorageRandomness.y)
    pub y: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:StorageRandomness.witness_address)
    pub witness_address: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:StorageRandomness.witness_gamma)
    pub witness_gamma: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:StorageRandomness.wintess_hash)
    pub wintess_hash: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:StorageRandomness.inverse_z)
    pub inverse_z: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:StorageRandomness.signature_proof)
    pub signature_proof: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:StorageRandomness.timestamp)
    pub timestamp: u64,
    // special fields
    // @@protoc_insertion_point(special_field:StorageRandomness.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StorageRandomness {
    fn default() -> &'a StorageRandomness {
        <StorageRandomness as ::protobuf::Message>::default_instance()
    }
}

impl StorageRandomness {
    pub fn new() -> StorageRandomness {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(16);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "uuid",
            |m: &StorageRandomness| { &m.uuid },
            |m: &mut StorageRandomness| { &mut m.uuid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "previous_uuid",
            |m: &StorageRandomness| { &m.previous_uuid },
            |m: &mut StorageRandomness| { &mut m.previous_uuid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "keyring_uuid",
            |m: &StorageRandomness| { &m.keyring_uuid },
            |m: &mut StorageRandomness| { &mut m.keyring_uuid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "receiver_uuid",
            |m: &StorageRandomness| { &m.receiver_uuid },
            |m: &mut StorageRandomness| { &mut m.receiver_uuid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "epoch",
            |m: &StorageRandomness| { &m.epoch },
            |m: &mut StorageRandomness| { &mut m.epoch },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "alpha",
            |m: &StorageRandomness| { &m.alpha },
            |m: &mut StorageRandomness| { &mut m.alpha },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "gamma",
            |m: &StorageRandomness| { &m.gamma },
            |m: &mut StorageRandomness| { &mut m.gamma },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "c",
            |m: &StorageRandomness| { &m.c },
            |m: &mut StorageRandomness| { &mut m.c },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "s",
            |m: &StorageRandomness| { &m.s },
            |m: &mut StorageRandomness| { &mut m.s },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "y",
            |m: &StorageRandomness| { &m.y },
            |m: &mut StorageRandomness| { &mut m.y },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "witness_address",
            |m: &StorageRandomness| { &m.witness_address },
            |m: &mut StorageRandomness| { &mut m.witness_address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "witness_gamma",
            |m: &StorageRandomness| { &m.witness_gamma },
            |m: &mut StorageRandomness| { &mut m.witness_gamma },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "wintess_hash",
            |m: &StorageRandomness| { &m.wintess_hash },
            |m: &mut StorageRandomness| { &mut m.wintess_hash },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "inverse_z",
            |m: &StorageRandomness| { &m.inverse_z },
            |m: &mut StorageRandomness| { &mut m.inverse_z },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "signature_proof",
            |m: &StorageRandomness| { &m.signature_proof },
            |m: &mut StorageRandomness| { &mut m.signature_proof },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "timestamp",
            |m: &StorageRandomness| { &m.timestamp },
            |m: &mut StorageRandomness| { &mut m.timestamp },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StorageRandomness>(
            "StorageRandomness",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StorageRandomness {
    const NAME: &'static str = "StorageRandomness";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.uuid = is.read_string()?;
                },
                18 => {
                    self.previous_uuid = is.read_string()?;
                },
                26 => {
                    self.keyring_uuid = is.read_string()?;
                },
                34 => {
                    self.receiver_uuid = is.read_string()?;
                },
                40 => {
                    self.epoch = is.read_uint64()?;
                },
                50 => {
                    self.alpha = is.read_bytes()?;
                },
                58 => {
                    self.gamma = is.read_bytes()?;
                },
                66 => {
                    self.c = is.read_bytes()?;
                },
                74 => {
                    self.s = is.read_bytes()?;
                },
                82 => {
                    self.y = is.read_bytes()?;
                },
                90 => {
                    self.witness_address = is.read_bytes()?;
                },
                98 => {
                    self.witness_gamma = is.read_bytes()?;
                },
                106 => {
                    self.wintess_hash = is.read_bytes()?;
                },
                114 => {
                    self.inverse_z = is.read_bytes()?;
                },
                122 => {
                    self.signature_proof = is.read_bytes()?;
                },
                128 => {
                    self.timestamp = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.uuid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.uuid);
        }
        if !self.previous_uuid.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.previous_uuid);
        }
        if !self.keyring_uuid.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.keyring_uuid);
        }
        if !self.receiver_uuid.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.receiver_uuid);
        }
        if self.epoch != 0 {
            my_size += ::protobuf::rt::uint64_size(5, self.epoch);
        }
        if !self.alpha.is_empty() {
            my_size += ::protobuf::rt::bytes_size(6, &self.alpha);
        }
        if !self.gamma.is_empty() {
            my_size += ::protobuf::rt::bytes_size(7, &self.gamma);
        }
        if !self.c.is_empty() {
            my_size += ::protobuf::rt::bytes_size(8, &self.c);
        }
        if !self.s.is_empty() {
            my_size += ::protobuf::rt::bytes_size(9, &self.s);
        }
        if !self.y.is_empty() {
            my_size += ::protobuf::rt::bytes_size(10, &self.y);
        }
        if !self.witness_address.is_empty() {
            my_size += ::protobuf::rt::bytes_size(11, &self.witness_address);
        }
        if !self.witness_gamma.is_empty() {
            my_size += ::protobuf::rt::bytes_size(12, &self.witness_gamma);
        }
        if !self.wintess_hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(13, &self.wintess_hash);
        }
        if !self.inverse_z.is_empty() {
            my_size += ::protobuf::rt::bytes_size(14, &self.inverse_z);
        }
        if !self.signature_proof.is_empty() {
            my_size += ::protobuf::rt::bytes_size(15, &self.signature_proof);
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::uint64_size(16, self.timestamp);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.uuid.is_empty() {
            os.write_string(1, &self.uuid)?;
        }
        if !self.previous_uuid.is_empty() {
            os.write_string(2, &self.previous_uuid)?;
        }
        if !self.keyring_uuid.is_empty() {
            os.write_string(3, &self.keyring_uuid)?;
        }
        if !self.receiver_uuid.is_empty() {
            os.write_string(4, &self.receiver_uuid)?;
        }
        if self.epoch != 0 {
            os.write_uint64(5, self.epoch)?;
        }
        if !self.alpha.is_empty() {
            os.write_bytes(6, &self.alpha)?;
        }
        if !self.gamma.is_empty() {
            os.write_bytes(7, &self.gamma)?;
        }
        if !self.c.is_empty() {
            os.write_bytes(8, &self.c)?;
        }
        if !self.s.is_empty() {
            os.write_bytes(9, &self.s)?;
        }
        if !self.y.is_empty() {
            os.write_bytes(10, &self.y)?;
        }
        if !self.witness_address.is_empty() {
            os.write_bytes(11, &self.witness_address)?;
        }
        if !self.witness_gamma.is_empty() {
            os.write_bytes(12, &self.witness_gamma)?;
        }
        if !self.wintess_hash.is_empty() {
            os.write_bytes(13, &self.wintess_hash)?;
        }
        if !self.inverse_z.is_empty() {
            os.write_bytes(14, &self.inverse_z)?;
        }
        if !self.signature_proof.is_empty() {
            os.write_bytes(15, &self.signature_proof)?;
        }
        if self.timestamp != 0 {
            os.write_uint64(16, self.timestamp)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StorageRandomness {
        StorageRandomness::new()
    }

    fn clear(&mut self) {
        self.uuid.clear();
        self.previous_uuid.clear();
        self.keyring_uuid.clear();
        self.receiver_uuid.clear();
        self.epoch = 0;
        self.alpha.clear();
        self.gamma.clear();
        self.c.clear();
        self.s.clear();
        self.y.clear();
        self.witness_address.clear();
        self.witness_gamma.clear();
        self.wintess_hash.clear();
        self.inverse_z.clear();
        self.signature_proof.clear();
        self.timestamp = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StorageRandomness {
        static instance: StorageRandomness = StorageRandomness {
            uuid: ::std::string::String::new(),
            previous_uuid: ::std::string::String::new(),
            keyring_uuid: ::std::string::String::new(),
            receiver_uuid: ::std::string::String::new(),
            epoch: 0,
            alpha: ::std::vec::Vec::new(),
            gamma: ::std::vec::Vec::new(),
            c: ::std::vec::Vec::new(),
            s: ::std::vec::Vec::new(),
            y: ::std::vec::Vec::new(),
            witness_address: ::std::vec::Vec::new(),
            witness_gamma: ::std::vec::Vec::new(),
            wintess_hash: ::std::vec::Vec::new(),
            inverse_z: ::std::vec::Vec::new(),
            signature_proof: ::std::vec::Vec::new(),
            timestamp: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StorageRandomness {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StorageRandomness").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StorageRandomness {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StorageRandomness {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:StorageKeyring)
pub struct StorageKeyring {
    // message fields
    // @@protoc_insertion_point(field:StorageKeyring.uuid)
    pub uuid: ::std::string::String,
    // @@protoc_insertion_point(field:StorageKeyring.username)
    pub username: ::std::string::String,
    // @@protoc_insertion_point(field:StorageKeyring.hmac_secret)
    pub hmac_secret: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:StorageKeyring.public_key)
    pub public_key: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:StorageKeyring.secret_key)
    pub secret_key: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:StorageKeyring.timestamp)
    pub timestamp: u64,
    // special fields
    // @@protoc_insertion_point(special_field:StorageKeyring.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StorageKeyring {
    fn default() -> &'a StorageKeyring {
        <StorageKeyring as ::protobuf::Message>::default_instance()
    }
}

impl StorageKeyring {
    pub fn new() -> StorageKeyring {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "uuid",
            |m: &StorageKeyring| { &m.uuid },
            |m: &mut StorageKeyring| { &mut m.uuid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "username",
            |m: &StorageKeyring| { &m.username },
            |m: &mut StorageKeyring| { &mut m.username },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "hmac_secret",
            |m: &StorageKeyring| { &m.hmac_secret },
            |m: &mut StorageKeyring| { &mut m.hmac_secret },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "public_key",
            |m: &StorageKeyring| { &m.public_key },
            |m: &mut StorageKeyring| { &mut m.public_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "secret_key",
            |m: &StorageKeyring| { &m.secret_key },
            |m: &mut StorageKeyring| { &mut m.secret_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "timestamp",
            |m: &StorageKeyring| { &m.timestamp },
            |m: &mut StorageKeyring| { &mut m.timestamp },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StorageKeyring>(
            "StorageKeyring",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StorageKeyring {
    const NAME: &'static str = "StorageKeyring";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.uuid = is.read_string()?;
                },
                18 => {
                    self.username = is.read_string()?;
                },
                26 => {
                    self.hmac_secret = is.read_bytes()?;
                },
                34 => {
                    self.public_key = is.read_bytes()?;
                },
                42 => {
                    self.secret_key = is.read_bytes()?;
                },
                48 => {
                    self.timestamp = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.uuid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.uuid);
        }
        if !self.username.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.username);
        }
        if !self.hmac_secret.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.hmac_secret);
        }
        if !self.public_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.public_key);
        }
        if !self.secret_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(5, &self.secret_key);
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::uint64_size(6, self.timestamp);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.uuid.is_empty() {
            os.write_string(1, &self.uuid)?;
        }
        if !self.username.is_empty() {
            os.write_string(2, &self.username)?;
        }
        if !self.hmac_secret.is_empty() {
            os.write_bytes(3, &self.hmac_secret)?;
        }
        if !self.public_key.is_empty() {
            os.write_bytes(4, &self.public_key)?;
        }
        if !self.secret_key.is_empty() {
            os.write_bytes(5, &self.secret_key)?;
        }
        if self.timestamp != 0 {
            os.write_uint64(6, self.timestamp)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StorageKeyring {
        StorageKeyring::new()
    }

    fn clear(&mut self) {
        self.uuid.clear();
        self.username.clear();
        self.hmac_secret.clear();
        self.public_key.clear();
        self.secret_key.clear();
        self.timestamp = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StorageKeyring {
        static instance: StorageKeyring = StorageKeyring {
            uuid: ::std::string::String::new(),
            username: ::std::string::String::new(),
            hmac_secret: ::std::vec::Vec::new(),
            public_key: ::std::vec::Vec::new(),
            secret_key: ::std::vec::Vec::new(),
            timestamp: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StorageKeyring {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StorageKeyring").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StorageKeyring {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StorageKeyring {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:StorageReceiver)
pub struct StorageReceiver {
    // message fields
    // @@protoc_insertion_point(field:StorageReceiver.uuid)
    pub uuid: ::std::string::String,
    // @@protoc_insertion_point(field:StorageReceiver.name)
    pub name: ::std::string::String,
    // @@protoc_insertion_point(field:StorageReceiver.network)
    pub network: u64,
    // @@protoc_insertion_point(field:StorageReceiver.address)
    pub address: ::std::string::String,
    // @@protoc_insertion_point(field:StorageReceiver.nonce)
    pub nonce: u64,
    // @@protoc_insertion_point(field:StorageReceiver.timestamp)
    pub timestamp: u64,
    // special fields
    // @@protoc_insertion_point(special_field:StorageReceiver.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StorageReceiver {
    fn default() -> &'a StorageReceiver {
        <StorageReceiver as ::protobuf::Message>::default_instance()
    }
}

impl StorageReceiver {
    pub fn new() -> StorageReceiver {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "uuid",
            |m: &StorageReceiver| { &m.uuid },
            |m: &mut StorageReceiver| { &mut m.uuid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &StorageReceiver| { &m.name },
            |m: &mut StorageReceiver| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "network",
            |m: &StorageReceiver| { &m.network },
            |m: &mut StorageReceiver| { &mut m.network },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "address",
            |m: &StorageReceiver| { &m.address },
            |m: &mut StorageReceiver| { &mut m.address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "nonce",
            |m: &StorageReceiver| { &m.nonce },
            |m: &mut StorageReceiver| { &mut m.nonce },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "timestamp",
            |m: &StorageReceiver| { &m.timestamp },
            |m: &mut StorageReceiver| { &mut m.timestamp },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StorageReceiver>(
            "StorageReceiver",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StorageReceiver {
    const NAME: &'static str = "StorageReceiver";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.uuid = is.read_string()?;
                },
                18 => {
                    self.name = is.read_string()?;
                },
                24 => {
                    self.network = is.read_uint64()?;
                },
                34 => {
                    self.address = is.read_string()?;
                },
                40 => {
                    self.nonce = is.read_uint64()?;
                },
                48 => {
                    self.timestamp = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.uuid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.uuid);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if self.network != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.network);
        }
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.address);
        }
        if self.nonce != 0 {
            my_size += ::protobuf::rt::uint64_size(5, self.nonce);
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::uint64_size(6, self.timestamp);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.uuid.is_empty() {
            os.write_string(1, &self.uuid)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if self.network != 0 {
            os.write_uint64(3, self.network)?;
        }
        if !self.address.is_empty() {
            os.write_string(4, &self.address)?;
        }
        if self.nonce != 0 {
            os.write_uint64(5, self.nonce)?;
        }
        if self.timestamp != 0 {
            os.write_uint64(6, self.timestamp)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StorageReceiver {
        StorageReceiver::new()
    }

    fn clear(&mut self) {
        self.uuid.clear();
        self.name.clear();
        self.network = 0;
        self.address.clear();
        self.nonce = 0;
        self.timestamp = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StorageReceiver {
        static instance: StorageReceiver = StorageReceiver {
            uuid: ::std::string::String::new(),
            name: ::std::string::String::new(),
            network: 0,
            address: ::std::string::String::new(),
            nonce: 0,
            timestamp: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StorageReceiver {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StorageReceiver").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StorageReceiver {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StorageReceiver {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rstorage.proto\"\xd5\x03\n\x11StorageRandomness\x12\x12\n\x04uuid\x18\
    \x01\x20\x01(\tR\x04uuid\x12#\n\rprevious_uuid\x18\x02\x20\x01(\tR\x0cpr\
    eviousUuid\x12!\n\x0ckeyring_uuid\x18\x03\x20\x01(\tR\x0bkeyringUuid\x12\
    #\n\rreceiver_uuid\x18\x04\x20\x01(\tR\x0creceiverUuid\x12\x14\n\x05epoc\
    h\x18\x05\x20\x01(\x04R\x05epoch\x12\x14\n\x05alpha\x18\x06\x20\x01(\x0c\
    R\x05alpha\x12\x14\n\x05gamma\x18\x07\x20\x01(\x0cR\x05gamma\x12\x0c\n\
    \x01c\x18\x08\x20\x01(\x0cR\x01c\x12\x0c\n\x01s\x18\t\x20\x01(\x0cR\x01s\
    \x12\x0c\n\x01y\x18\n\x20\x01(\x0cR\x01y\x12'\n\x0fwitness_address\x18\
    \x0b\x20\x01(\x0cR\x0ewitnessAddress\x12#\n\rwitness_gamma\x18\x0c\x20\
    \x01(\x0cR\x0cwitnessGamma\x12!\n\x0cwintess_hash\x18\r\x20\x01(\x0cR\
    \x0bwintessHash\x12\x1b\n\tinverse_z\x18\x0e\x20\x01(\x0cR\x08inverseZ\
    \x12'\n\x0fsignature_proof\x18\x0f\x20\x01(\x0cR\x0esignatureProof\x12\
    \x1c\n\ttimestamp\x18\x10\x20\x01(\x04R\ttimestamp\"\xbd\x01\n\x0eStorag\
    eKeyring\x12\x12\n\x04uuid\x18\x01\x20\x01(\tR\x04uuid\x12\x1a\n\x08user\
    name\x18\x02\x20\x01(\tR\x08username\x12\x1f\n\x0bhmac_secret\x18\x03\
    \x20\x01(\x0cR\nhmacSecret\x12\x1d\n\npublic_key\x18\x04\x20\x01(\x0cR\t\
    publicKey\x12\x1d\n\nsecret_key\x18\x05\x20\x01(\x0cR\tsecretKey\x12\x1c\
    \n\ttimestamp\x18\x06\x20\x01(\x04R\ttimestamp\"\xa1\x01\n\x0fStorageRec\
    eiver\x12\x12\n\x04uuid\x18\x01\x20\x01(\tR\x04uuid\x12\x12\n\x04name\
    \x18\x02\x20\x01(\tR\x04name\x12\x18\n\x07network\x18\x03\x20\x01(\x04R\
    \x07network\x12\x18\n\x07address\x18\x04\x20\x01(\tR\x07address\x12\x14\
    \n\x05nonce\x18\x05\x20\x01(\x04R\x05nonce\x12\x1c\n\ttimestamp\x18\x06\
    \x20\x01(\x04R\ttimestampJ\xde\x0c\n\x06\x12\x04\0\0%\x01\n\x08\n\x01\
    \x0c\x12\x03\0\0\x12\n\n\n\x02\x04\0\x12\x04\x02\0\x13\x01\n\n\n\x03\x04\
    \0\x01\x12\x03\x02\x08\x19\n\x0b\n\x04\x04\0\x02\0\x12\x03\x03\x02\x12\n\
    \x0c\n\x05\x04\0\x02\0\x05\x12\x03\x03\x02\x08\n\x0c\n\x05\x04\0\x02\0\
    \x01\x12\x03\x03\t\r\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x03\x10\x11\n\
    \x0b\n\x04\x04\0\x02\x01\x12\x03\x04\x02\x1b\n\x0c\n\x05\x04\0\x02\x01\
    \x05\x12\x03\x04\x02\x08\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x04\t\x16\
    \n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x04\x19\x1a\n\x0b\n\x04\x04\0\x02\
    \x02\x12\x03\x05\x02\x1a\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x05\x02\
    \x08\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x05\t\x15\n\x0c\n\x05\x04\0\
    \x02\x02\x03\x12\x03\x05\x18\x19\n\x0b\n\x04\x04\0\x02\x03\x12\x03\x06\
    \x02\x1b\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\x06\x02\x08\n\x0c\n\x05\
    \x04\0\x02\x03\x01\x12\x03\x06\t\x16\n\x0c\n\x05\x04\0\x02\x03\x03\x12\
    \x03\x06\x19\x1a\n\x0b\n\x04\x04\0\x02\x04\x12\x03\x07\x02\x13\n\x0c\n\
    \x05\x04\0\x02\x04\x05\x12\x03\x07\x02\x08\n\x0c\n\x05\x04\0\x02\x04\x01\
    \x12\x03\x07\t\x0e\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03\x07\x11\x12\n\
    \x0b\n\x04\x04\0\x02\x05\x12\x03\x08\x02\x12\n\x0c\n\x05\x04\0\x02\x05\
    \x05\x12\x03\x08\x02\x07\n\x0c\n\x05\x04\0\x02\x05\x01\x12\x03\x08\x08\r\
    \n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03\x08\x10\x11\n\x0b\n\x04\x04\0\x02\
    \x06\x12\x03\t\x02\x12\n\x0c\n\x05\x04\0\x02\x06\x05\x12\x03\t\x02\x07\n\
    \x0c\n\x05\x04\0\x02\x06\x01\x12\x03\t\x08\r\n\x0c\n\x05\x04\0\x02\x06\
    \x03\x12\x03\t\x10\x11\n\x0b\n\x04\x04\0\x02\x07\x12\x03\n\x02\x0e\n\x0c\
    \n\x05\x04\0\x02\x07\x05\x12\x03\n\x02\x07\n\x0c\n\x05\x04\0\x02\x07\x01\
    \x12\x03\n\x08\t\n\x0c\n\x05\x04\0\x02\x07\x03\x12\x03\n\x0c\r\n\x0b\n\
    \x04\x04\0\x02\x08\x12\x03\x0b\x02\x0e\n\x0c\n\x05\x04\0\x02\x08\x05\x12\
    \x03\x0b\x02\x07\n\x0c\n\x05\x04\0\x02\x08\x01\x12\x03\x0b\x08\t\n\x0c\n\
    \x05\x04\0\x02\x08\x03\x12\x03\x0b\x0c\r\n\x0b\n\x04\x04\0\x02\t\x12\x03\
    \x0c\x02\x0f\n\x0c\n\x05\x04\0\x02\t\x05\x12\x03\x0c\x02\x07\n\x0c\n\x05\
    \x04\0\x02\t\x01\x12\x03\x0c\x08\t\n\x0c\n\x05\x04\0\x02\t\x03\x12\x03\
    \x0c\x0c\x0e\n\x0b\n\x04\x04\0\x02\n\x12\x03\r\x02\x1d\n\x0c\n\x05\x04\0\
    \x02\n\x05\x12\x03\r\x02\x07\n\x0c\n\x05\x04\0\x02\n\x01\x12\x03\r\x08\
    \x17\n\x0c\n\x05\x04\0\x02\n\x03\x12\x03\r\x1a\x1c\n\x0b\n\x04\x04\0\x02\
    \x0b\x12\x03\x0e\x02\x1b\n\x0c\n\x05\x04\0\x02\x0b\x05\x12\x03\x0e\x02\
    \x07\n\x0c\n\x05\x04\0\x02\x0b\x01\x12\x03\x0e\x08\x15\n\x0c\n\x05\x04\0\
    \x02\x0b\x03\x12\x03\x0e\x18\x1a\n\x0b\n\x04\x04\0\x02\x0c\x12\x03\x0f\
    \x02\x1a\n\x0c\n\x05\x04\0\x02\x0c\x05\x12\x03\x0f\x02\x07\n\x0c\n\x05\
    \x04\0\x02\x0c\x01\x12\x03\x0f\x08\x14\n\x0c\n\x05\x04\0\x02\x0c\x03\x12\
    \x03\x0f\x17\x19\n\x0b\n\x04\x04\0\x02\r\x12\x03\x10\x02\x17\n\x0c\n\x05\
    \x04\0\x02\r\x05\x12\x03\x10\x02\x07\n\x0c\n\x05\x04\0\x02\r\x01\x12\x03\
    \x10\x08\x11\n\x0c\n\x05\x04\0\x02\r\x03\x12\x03\x10\x14\x16\n\x0b\n\x04\
    \x04\0\x02\x0e\x12\x03\x11\x02\x1d\n\x0c\n\x05\x04\0\x02\x0e\x05\x12\x03\
    \x11\x02\x07\n\x0c\n\x05\x04\0\x02\x0e\x01\x12\x03\x11\x08\x17\n\x0c\n\
    \x05\x04\0\x02\x0e\x03\x12\x03\x11\x1a\x1c\n\x0b\n\x04\x04\0\x02\x0f\x12\
    \x03\x12\x02\x18\n\x0c\n\x05\x04\0\x02\x0f\x05\x12\x03\x12\x02\x08\n\x0c\
    \n\x05\x04\0\x02\x0f\x01\x12\x03\x12\t\x12\n\x0c\n\x05\x04\0\x02\x0f\x03\
    \x12\x03\x12\x15\x17\n\n\n\x02\x04\x01\x12\x04\x15\0\x1c\x01\n\n\n\x03\
    \x04\x01\x01\x12\x03\x15\x08\x16\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x16\
    \x02\x12\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x16\x02\x08\n\x0c\n\x05\
    \x04\x01\x02\0\x01\x12\x03\x16\t\r\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\
    \x16\x10\x11\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x17\x02\x16\n\x0c\n\x05\
    \x04\x01\x02\x01\x05\x12\x03\x17\x02\x08\n\x0c\n\x05\x04\x01\x02\x01\x01\
    \x12\x03\x17\t\x11\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x17\x14\x15\n\
    \x0b\n\x04\x04\x01\x02\x02\x12\x03\x18\x02\x18\n\x0c\n\x05\x04\x01\x02\
    \x02\x05\x12\x03\x18\x02\x07\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03\x18\
    \x08\x13\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03\x18\x16\x17\n\x0b\n\x04\
    \x04\x01\x02\x03\x12\x03\x19\x02\x17\n\x0c\n\x05\x04\x01\x02\x03\x05\x12\
    \x03\x19\x02\x07\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\x03\x19\x08\x12\n\
    \x0c\n\x05\x04\x01\x02\x03\x03\x12\x03\x19\x15\x16\n\x0b\n\x04\x04\x01\
    \x02\x04\x12\x03\x1a\x02\x17\n\x0c\n\x05\x04\x01\x02\x04\x05\x12\x03\x1a\
    \x02\x07\n\x0c\n\x05\x04\x01\x02\x04\x01\x12\x03\x1a\x08\x12\n\x0c\n\x05\
    \x04\x01\x02\x04\x03\x12\x03\x1a\x15\x16\n\x0b\n\x04\x04\x01\x02\x05\x12\
    \x03\x1b\x02\x17\n\x0c\n\x05\x04\x01\x02\x05\x05\x12\x03\x1b\x02\x08\n\
    \x0c\n\x05\x04\x01\x02\x05\x01\x12\x03\x1b\t\x12\n\x0c\n\x05\x04\x01\x02\
    \x05\x03\x12\x03\x1b\x15\x16\n\n\n\x02\x04\x02\x12\x04\x1e\0%\x01\n\n\n\
    \x03\x04\x02\x01\x12\x03\x1e\x08\x17\n\x0b\n\x04\x04\x02\x02\0\x12\x03\
    \x1f\x02\x12\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x1f\x02\x08\n\x0c\n\
    \x05\x04\x02\x02\0\x01\x12\x03\x1f\t\r\n\x0c\n\x05\x04\x02\x02\0\x03\x12\
    \x03\x1f\x10\x11\n\x0b\n\x04\x04\x02\x02\x01\x12\x03\x20\x02\x12\n\x0c\n\
    \x05\x04\x02\x02\x01\x05\x12\x03\x20\x02\x08\n\x0c\n\x05\x04\x02\x02\x01\
    \x01\x12\x03\x20\t\r\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\x20\x10\x11\
    \n\x0b\n\x04\x04\x02\x02\x02\x12\x03!\x02\x15\n\x0c\n\x05\x04\x02\x02\
    \x02\x05\x12\x03!\x02\x08\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03!\t\x10\
    \n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x03!\x13\x14\n\x0b\n\x04\x04\x02\
    \x02\x03\x12\x03\"\x02\x15\n\x0c\n\x05\x04\x02\x02\x03\x05\x12\x03\"\x02\
    \x08\n\x0c\n\x05\x04\x02\x02\x03\x01\x12\x03\"\t\x10\n\x0c\n\x05\x04\x02\
    \x02\x03\x03\x12\x03\"\x13\x14\n\x0b\n\x04\x04\x02\x02\x04\x12\x03#\x02\
    \x13\n\x0c\n\x05\x04\x02\x02\x04\x05\x12\x03#\x02\x08\n\x0c\n\x05\x04\
    \x02\x02\x04\x01\x12\x03#\t\x0e\n\x0c\n\x05\x04\x02\x02\x04\x03\x12\x03#\
    \x11\x12\n\x0b\n\x04\x04\x02\x02\x05\x12\x03$\x02\x17\n\x0c\n\x05\x04\
    \x02\x02\x05\x05\x12\x03$\x02\x08\n\x0c\n\x05\x04\x02\x02\x05\x01\x12\
    \x03$\t\x12\n\x0c\n\x05\x04\x02\x02\x05\x03\x12\x03$\x15\x16b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(StorageRandomness::generated_message_descriptor_data());
            messages.push(StorageKeyring::generated_message_descriptor_data());
            messages.push(StorageReceiver::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
